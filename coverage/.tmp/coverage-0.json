{"/home/seren/Repos/serencognito.github.io/src/lib/util/string-tokenisation.ts":{"path":"/home/seren/Repos/serencognito.github.io/src/lib/util/string-tokenisation.ts","statementMap":{"0":{"start":{"line":1,"column":39},"end":{"line":14,"column":19}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":52}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":44}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":58}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":60}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":48}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":62}},"7":{"start":{"line":8,"column":2},"end":{"line":8,"column":50}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":56}},"9":{"start":{"line":10,"column":2},"end":{"line":10,"column":56}},"10":{"start":{"line":11,"column":2},"end":{"line":11,"column":46}},"11":{"start":{"line":12,"column":2},"end":{"line":12,"column":47}},"12":{"start":{"line":13,"column":2},"end":{"line":13,"column":20}},"13":{"start":{"line":15,"column":32},"end":{"line":35,"column":1}},"14":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":26}},"16":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"17":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"18":{"start":{"line":22,"column":2},"end":{"line":28,"column":3}},"19":{"start":{"line":23,"column":4},"end":{"line":27,"column":5}},"20":{"start":{"line":24,"column":6},"end":{"line":24,"column":23}},"21":{"start":{"line":26,"column":6},"end":{"line":26,"column":28}},"22":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"23":{"start":{"line":30,"column":4},"end":{"line":30,"column":27}},"24":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"25":{"start":{"line":33,"column":4},"end":{"line":33,"column":21}},"26":{"start":{"line":36,"column":28},"end":{"line":72,"column":1}},"27":{"start":{"line":37,"column":2},"end":{"line":38,"column":29}},"28":{"start":{"line":38,"column":4},"end":{"line":38,"column":29}},"29":{"start":{"line":39,"column":2},"end":{"line":52,"column":27}},"30":{"start":{"line":52,"column":4},"end":{"line":52,"column":27}},"31":{"start":{"line":53,"column":2},"end":{"line":54,"column":23}},"32":{"start":{"line":54,"column":4},"end":{"line":54,"column":23}},"33":{"start":{"line":55,"column":2},"end":{"line":56,"column":31}},"34":{"start":{"line":56,"column":4},"end":{"line":56,"column":31}},"35":{"start":{"line":57,"column":2},"end":{"line":58,"column":25}},"36":{"start":{"line":58,"column":4},"end":{"line":58,"column":25}},"37":{"start":{"line":59,"column":2},"end":{"line":60,"column":26}},"38":{"start":{"line":60,"column":4},"end":{"line":60,"column":26}},"39":{"start":{"line":61,"column":2},"end":{"line":62,"column":24}},"40":{"start":{"line":62,"column":4},"end":{"line":62,"column":24}},"41":{"start":{"line":63,"column":2},"end":{"line":64,"column":26}},"42":{"start":{"line":64,"column":4},"end":{"line":64,"column":26}},"43":{"start":{"line":65,"column":2},"end":{"line":66,"column":29}},"44":{"start":{"line":66,"column":4},"end":{"line":66,"column":29}},"45":{"start":{"line":67,"column":2},"end":{"line":68,"column":30}},"46":{"start":{"line":68,"column":4},"end":{"line":68,"column":30}},"47":{"start":{"line":69,"column":2},"end":{"line":70,"column":32}},"48":{"start":{"line":70,"column":4},"end":{"line":70,"column":32}},"49":{"start":{"line":71,"column":2},"end":{"line":71,"column":23}},"50":{"start":{"line":73,"column":28},"end":{"line":95,"column":1}},"51":{"start":{"line":74,"column":2},"end":{"line":94,"column":3}},"52":{"start":{"line":76,"column":6},"end":{"line":76,"column":34}},"53":{"start":{"line":78,"column":6},"end":{"line":78,"column":30}},"54":{"start":{"line":80,"column":6},"end":{"line":80,"column":33}},"55":{"start":{"line":82,"column":6},"end":{"line":82,"column":32}},"56":{"start":{"line":84,"column":6},"end":{"line":84,"column":32}},"57":{"start":{"line":87,"column":6},"end":{"line":87,"column":32}},"58":{"start":{"line":89,"column":6},"end":{"line":89,"column":32}},"59":{"start":{"line":93,"column":6},"end":{"line":93,"column":16}},"60":{"start":{"line":96,"column":24},"end":{"line":117,"column":1}},"61":{"start":{"line":97,"column":16},"end":{"line":97,"column":91}},"62":{"start":{"line":98,"column":21},"end":{"line":98,"column":82}},"63":{"start":{"line":98,"column":56},"end":{"line":98,"column":74}},"64":{"start":{"line":99,"column":21},"end":{"line":99,"column":23}},"65":{"start":{"line":100,"column":2},"end":{"line":100,"column":43}},"66":{"start":{"line":101,"column":25},"end":{"line":109,"column":4}},"67":{"start":{"line":102,"column":18},"end":{"line":106,"column":5}},"68":{"start":{"line":107,"column":4},"end":{"line":107,"column":39}},"69":{"start":{"line":108,"column":4},"end":{"line":108,"column":17}},"70":{"start":{"line":110,"column":2},"end":{"line":112,"column":5}},"71":{"start":{"line":111,"column":4},"end":{"line":111,"column":43}},"72":{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},"73":{"start":{"line":113,"column":39},"end":{"line":113,"column":67}},"74":{"start":{"line":114,"column":4},"end":{"line":114,"column":53}},"75":{"start":{"line":116,"column":2},"end":{"line":116,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}},"loc":{"start":{"line":1,"column":56},"end":{"line":14,"column":1}},"line":1},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":32},"end":{"line":15,"column":33}},"loc":{"start":{"line":15,"column":54},"end":{"line":35,"column":1}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":28},"end":{"line":36,"column":29}},"loc":{"start":{"line":36,"column":50},"end":{"line":72,"column":1}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":73,"column":28},"end":{"line":73,"column":29}},"loc":{"start":{"line":73,"column":38},"end":{"line":95,"column":1}},"line":73},"4":{"name":"(anonymous_4)","decl":{"start":{"line":96,"column":24},"end":{"line":96,"column":25}},"loc":{"start":{"line":96,"column":37},"end":{"line":117,"column":1}},"line":96},"5":{"name":"(anonymous_5)","decl":{"start":{"line":98,"column":46},"end":{"line":98,"column":47}},"loc":{"start":{"line":98,"column":56},"end":{"line":98,"column":74}},"line":98},"6":{"name":"(anonymous_6)","decl":{"start":{"line":101,"column":35},"end":{"line":101,"column":36}},"loc":{"start":{"line":101,"column":45},"end":{"line":109,"column":3}},"line":101},"7":{"name":"(anonymous_7)","decl":{"start":{"line":110,"column":25},"end":{"line":110,"column":26}},"loc":{"start":{"line":110,"column":39},"end":{"line":112,"column":3}},"line":110},"8":{"name":"(anonymous_8)","decl":{"start":{"line":113,"column":28},"end":{"line":113,"column":29}},"loc":{"start":{"line":113,"column":39},"end":{"line":113,"column":67}},"line":113}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":3},"end":{"line":14,"column":18}},"type":"binary-expr","locations":[{"start":{"line":14,"column":3},"end":{"line":14,"column":12}},{"start":{"line":14,"column":16},"end":{"line":14,"column":18}}],"line":14},"1":{"loc":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},{"start":{},"end":{}}],"line":16},"2":{"loc":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},{"start":{},"end":{}}],"line":19},"3":{"loc":{"start":{"line":22,"column":2},"end":{"line":28,"column":3}},"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":28,"column":3}},{"start":{},"end":{}}],"line":22},"4":{"loc":{"start":{"line":23,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":27,"column":5}},{"start":{"line":25,"column":11},"end":{"line":27,"column":5}}],"line":23},"5":{"loc":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},{"start":{},"end":{}}],"line":29},"6":{"loc":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},{"start":{},"end":{}}],"line":32},"7":{"loc":{"start":{"line":32,"column":6},"end":{"line":32,"column":80}},"type":"binary-expr","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":64}},{"start":{"line":32,"column":68},"end":{"line":32,"column":80}}],"line":32},"8":{"loc":{"start":{"line":32,"column":40},"end":{"line":32,"column":63}},"type":"binary-expr","locations":[{"start":{"line":32,"column":40},"end":{"line":32,"column":57}},{"start":{"line":32,"column":61},"end":{"line":32,"column":63}}],"line":32},"9":{"loc":{"start":{"line":37,"column":2},"end":{"line":38,"column":29}},"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":38,"column":29}},{"start":{},"end":{}}],"line":37},"10":{"loc":{"start":{"line":39,"column":2},"end":{"line":52,"column":27}},"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":52,"column":27}},{"start":{},"end":{}}],"line":39},"11":{"loc":{"start":{"line":53,"column":2},"end":{"line":54,"column":23}},"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":54,"column":23}},{"start":{},"end":{}}],"line":53},"12":{"loc":{"start":{"line":55,"column":2},"end":{"line":56,"column":31}},"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":56,"column":31}},{"start":{},"end":{}}],"line":55},"13":{"loc":{"start":{"line":55,"column":6},"end":{"line":55,"column":53}},"type":"binary-expr","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":25}},{"start":{"line":55,"column":29},"end":{"line":55,"column":53}}],"line":55},"14":{"loc":{"start":{"line":57,"column":2},"end":{"line":58,"column":25}},"type":"if","locations":[{"start":{"line":57,"column":2},"end":{"line":58,"column":25}},{"start":{},"end":{}}],"line":57},"15":{"loc":{"start":{"line":59,"column":2},"end":{"line":60,"column":26}},"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":60,"column":26}},{"start":{},"end":{}}],"line":59},"16":{"loc":{"start":{"line":61,"column":2},"end":{"line":62,"column":24}},"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":62,"column":24}},{"start":{},"end":{}}],"line":61},"17":{"loc":{"start":{"line":63,"column":2},"end":{"line":64,"column":26}},"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":64,"column":26}},{"start":{},"end":{}}],"line":63},"18":{"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":49}},"type":"binary-expr","locations":[{"start":{"line":63,"column":26},"end":{"line":63,"column":43}},{"start":{"line":63,"column":47},"end":{"line":63,"column":49}}],"line":63},"19":{"loc":{"start":{"line":65,"column":2},"end":{"line":66,"column":29}},"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":66,"column":29}},{"start":{},"end":{}}],"line":65},"20":{"loc":{"start":{"line":67,"column":2},"end":{"line":68,"column":30}},"type":"if","locations":[{"start":{"line":67,"column":2},"end":{"line":68,"column":30}},{"start":{},"end":{}}],"line":67},"21":{"loc":{"start":{"line":69,"column":2},"end":{"line":70,"column":32}},"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":70,"column":32}},{"start":{},"end":{}}],"line":69},"22":{"loc":{"start":{"line":74,"column":2},"end":{"line":94,"column":3}},"type":"switch","locations":[{"start":{"line":75,"column":4},"end":{"line":76,"column":34}},{"start":{"line":77,"column":4},"end":{"line":78,"column":30}},{"start":{"line":79,"column":4},"end":{"line":80,"column":33}},{"start":{"line":81,"column":4},"end":{"line":82,"column":32}},{"start":{"line":83,"column":4},"end":{"line":84,"column":32}},{"start":{"line":85,"column":4},"end":{"line":85,"column":27}},{"start":{"line":86,"column":4},"end":{"line":87,"column":32}},{"start":{"line":88,"column":4},"end":{"line":89,"column":32}},{"start":{"line":90,"column":4},"end":{"line":90,"column":23}},{"start":{"line":91,"column":4},"end":{"line":91,"column":27}},{"start":{"line":92,"column":4},"end":{"line":93,"column":16}}],"line":74},"23":{"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":82}},"type":"binary-expr","locations":[{"start":{"line":98,"column":21},"end":{"line":98,"column":76}},{"start":{"line":98,"column":80},"end":{"line":98,"column":82}}],"line":98},"24":{"loc":{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},"type":"if","locations":[{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},{"start":{},"end":{}}],"line":113}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[1,1],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0,0,0,0,0],"23":[0,0],"24":[0,0]},"inputSourceMap":{"version":3,"sources":["/home/seren/Repos/serencognito.github.io/src/lib/util/string-tokenisation.ts"],"sourcesContent":["/**\n * Represents the different types of tokens used for string tokenization.\n */\nexport enum TokenType {\n\tKeyword,\n\tTag,\n\tTagContent,\n\tObjectBrace,\n\tBrace,\n\tBraceContent,\n\tString,\n\tClassName,\n\tStructure,\n\tIcon,\n\tNone\n}\n\n/**\n * Handles the token stack based on the given word.\n * @param word - The word to handle.\n * @param tokenStack - The token stack to modify.\n */\nexport const handleTokenStack = (word: string, tokenStack: string[]) => {\n\tif (['(', '[', '<', '{'].includes(word)) {\n\t\ttokenStack.push(word);\n\t}\n\tif ([')', ']', '>', '}'].includes(word)) {\n\t\ttokenStack.pop();\n\t}\n\n\tif ([\"'\", '\"'].includes(word)) {\n\t\tif (tokenStack[tokenStack.length - 1] === word) {\n\t\t\ttokenStack.pop();\n\t\t} else {\n\t\t\ttokenStack.push(word);\n\t\t}\n\t}\n\n\tif (['let', 'const', 'func'].includes(word)) {\n\t\ttokenStack.push('let');\n\t}\n\n\tif (['let', 'const', 'func'].includes(tokenStack.at(-1) ?? '') && word === '=') {\n\t\ttokenStack.pop();\n\t}\n};\n\n/**\n * Determines the token type for a given word based on predefined rules.\n * @param word - The word to determine the token type for.\n * @param tokenStack - A stack of tokens encountered so far\n * that may influence the current word's classification.\n * @returns The token type for the given word.\n */\nexport const getTokenType = (word: string, tokenStack: string[]) => {\n\tif (['Icon', 'Technologies'].includes(word)) return TokenType.ClassName;\n\n\tif (\n\t\t[\n\t\t\t'import',\n\t\t\t'type',\n\t\t\t'from',\n\t\t\t'if',\n\t\t\t'else',\n\t\t\t'each',\n\t\t\t'as',\n\t\t\t'let',\n\t\t\t'const',\n\t\t\t'===',\n\t\t\t'interface'\n\t\t].includes(word)\n\t)\n\t\treturn TokenType.Keyword;\n\n\tif (['script', 'div', 'span', 'h2', 'a', 'p'].includes(word)) return TokenType.Tag;\n\n\tif (word.match(/({|})/) && tokenStack.includes('[')) return TokenType.ObjectBrace;\n\tif (word.match(/({|})/)) return TokenType.Brace;\n\n\tif (word.match(/(\"|')/)) return TokenType.String;\n\n\tif (word.match(/^%.*%$/)) return TokenType.Icon;\n\n\tif ([\"'\", '\"'].includes(tokenStack.at(-1) ?? '')) return TokenType.String;\n\n\tif (['(', ')', '[', ']', '<', '>', '=', '/', '#', ';'].includes(word)) return TokenType.Structure;\n\n\tif (tokenStack.at(-1) == '<') return TokenType.TagContent;\n\n\tif (tokenStack.at(-1) == '{') return TokenType.BraceContent;\n\n\treturn TokenType.None;\n};\n\n/**\n * Returns the CSS class name based on the given token type.\n * @param type The token type.\n * @returns The CSS class name.\n */\nexport const getWordClass = (type: TokenType) => {\n\tswitch (type) {\n\t\tcase TokenType.Keyword:\n\t\t\treturn 'text-secondary-500';\n\t\tcase TokenType.Tag:\n\t\t\treturn 'text-error-500';\n\t\tcase TokenType.ObjectBrace:\n\t\t\treturn 'text-tertiary-500';\n\t\tcase TokenType.Brace:\n\t\t\treturn 'text-warning-500';\n\t\tcase TokenType.BraceContent:\n\t\t\treturn 'text-primary-500';\n\t\tcase TokenType.ClassName:\n\t\tcase TokenType.TagContent:\n\t\t\treturn 'text-warning-400';\n\t\tcase TokenType.String:\n\t\t\treturn 'text-success-500';\n\t\tcase TokenType.None:\n\t\tcase TokenType.Structure:\n\t\tcase TokenType.Icon:\n\t\t\treturn '';\n\t}\n};\n\n/**\n * Tokenizes the given content string in order to apply psuedo-syntax highlighting.\n * @param content The string to be tokenized.\n * @returns An array of tokens representing the content string.\n */\nexport const tokenize = (content: string) => {\n\t// Split on whitespace or any of the following characters: [ ] { } ( ) < > / # : = \" ' ;\n\tconst words = content.split(/(\\s+|\\[|\\]|\\{|\\}|\\(|\\)|<|>|\\/|#|:|=|\"|'|;)/).filter(Boolean);\n\tconst firstToken = words.at(words.findIndex((word) => word.trim() !== '')) ?? '';\n\tconst tokenStack: string[] = [];\n\thandleTokenStack(firstToken, tokenStack);\n\n\tconst tokenizedWords = words.map((word) => {\n\t\tconst token = {\n\t\t\tcontent: word,\n\t\t\ttype: getTokenType(word, tokenStack),\n\t\t\tclass: ''\n\t\t};\n\t\thandleTokenStack(word, tokenStack);\n\n\t\treturn token;\n\t});\n\n\ttokenizedWords.forEach((token, i) => {\n\t\ttoken.class = getWordClass(token.type);\n\t});\n\n\tif (tokenizedWords.filter((token) => token.content === 'flex-col').length > 0) {\n\t\tconsole.debug('tokenizedWords:', tokenizedWords);\n\t}\n\treturn tokenizedWords;\n};\n"],"mappings":"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","names":["TokenType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"de3e9e99639e884a2ba330edd9fd4648444c58b4"}}